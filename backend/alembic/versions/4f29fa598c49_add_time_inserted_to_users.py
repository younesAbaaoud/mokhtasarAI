"""Add time_inserted to Users

Revision ID: 4f29fa598c49
Revises: 
Create Date: 2025-06-11 19:41:00.215976

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '4f29fa598c49'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('Users', sa.Column('time_inserted', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.alter_column('Users', 'email',
               existing_type=sa.VARCHAR(length=70),
               type_=sa.String(length=255),
               nullable=False)
    op.alter_column('Users', 'password',
               existing_type=sa.VARCHAR(length=250),
               type_=sa.String(length=255),
               nullable=False)
    op.alter_column('Users', 'role',
               existing_type=postgresql.ENUM('ETUDIANT', 'PROFESSEUR', name='userrole'),
               type_=sa.String(length=50),
               existing_nullable=False)
    op.create_index(op.f('ix_Users_id'), 'Users', ['id'], unique=False)
    op.add_column('cours', sa.Column('module_id', sa.Integer(), nullable=False))
    op.create_foreign_key(None, 'cours', 'modules', ['module_id'], ['id'])
    op.drop_column('cours', 'module')
    op.add_column('modules', sa.Column('time_inserted', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.alter_column('modules', 'name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.alter_column('modules', 'abreviation',
               existing_type=sa.VARCHAR(length=10),
               type_=sa.String(length=50),
               existing_nullable=False)

            
    op.execute("""
INSERT INTO modules (id, name, abreviation, description) 
VALUES (1, 'Base de Donnees', 'BD', 'les tables , SQL , keys')
ON CONFLICT (id) DO NOTHING;
""")

op.execute("""
INSERT INTO "Users" (id, username, email, password, role) 
VALUES (1, 'admin', 'admin123@gmail.com', 'admin123', 'PROFESSEUR')
ON CONFLICT (id) DO NOTHING;
""")

    # ### end Alembic commands ###



def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('modules', 'abreviation',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=10),
               existing_nullable=False)
    op.alter_column('modules', 'name',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
    op.drop_column('modules', 'time_inserted')
    op.add_column('cours', sa.Column('module', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'cours', type_='foreignkey')
    op.drop_column('cours', 'module_id')
    op.drop_index(op.f('ix_Users_id'), table_name='Users')
    op.alter_column('Users', 'role',
               existing_type=sa.String(length=50),
               type_=postgresql.ENUM('ETUDIANT', 'PROFESSEUR', name='userrole'),
               existing_nullable=False)
    op.alter_column('Users', 'password',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=250),
               nullable=True)
    op.alter_column('Users', 'email',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=70),
               nullable=True)
    op.drop_column('Users', 'time_inserted')
    op.execute("DELETE FROM modules WHERE id = 1")
    op.execute('DELETE FROM "Users" WHERE id = 1')
    # ### end Alembic commands ###
